// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among2;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class lithuanianStemmer extends org.tartarus.snowball.SnowballStemmer {

    private static final long serialVersionUID = 1L;

private final static Among2 a_0[] = {
    new Among2("a", -1, -1),
    new Among2("ia", 0, -1),
    new Among2("eria", 1, -1),
    new Among2("osna", 0, -1),
    new Among2("iosna", 3, -1),
    new Among2("uosna", 3, -1),
    new Among2("iuosna", 5, -1),
    new Among2("ysna", 0, -1),
    new Among2("\u0117sna", 0, -1),
    new Among2("e", -1, -1),
    new Among2("ie", 9, -1),
    new Among2("enie", 10, -1),
    new Among2("erie", 10, -1),
    new Among2("oje", 9, -1),
    new Among2("ioje", 13, -1),
    new Among2("uje", 9, -1),
    new Among2("iuje", 15, -1),
    new Among2("yje", 9, -1),
    new Among2("enyje", 17, -1),
    new Among2("eryje", 17, -1),
    new Among2("\u0117je", 9, -1),
    new Among2("ame", 9, -1),
    new Among2("iame", 21, -1),
    new Among2("sime", 9, -1),
    new Among2("ome", 9, -1),
    new Among2("\u0117me", 9, -1),
    new Among2("tum\u0117me", 25, -1),
    new Among2("ose", 9, -1),
    new Among2("iose", 27, -1),
    new Among2("uose", 27, -1),
    new Among2("iuose", 29, -1),
    new Among2("yse", 9, -1),
    new Among2("enyse", 31, -1),
    new Among2("eryse", 31, -1),
    new Among2("\u0117se", 9, -1),
    new Among2("ate", 9, -1),
    new Among2("iate", 35, -1),
    new Among2("ite", 9, -1),
    new Among2("kite", 37, -1),
    new Among2("site", 37, -1),
    new Among2("ote", 9, -1),
    new Among2("tute", 9, -1),
    new Among2("\u0117te", 9, -1),
    new Among2("tum\u0117te", 42, -1),
    new Among2("i", -1, -1),
    new Among2("ai", 44, -1),
    new Among2("iai", 45, -1),
    new Among2("eriai", 46, -1),
    new Among2("ei", 44, -1),
    new Among2("tumei", 48, -1),
    new Among2("ki", 44, -1),
    new Among2("imi", 44, -1),
    new Among2("erimi", 51, -1),
    new Among2("umi", 44, -1),
    new Among2("iumi", 53, -1),
    new Among2("si", 44, -1),
    new Among2("asi", 55, -1),
    new Among2("iasi", 56, -1),
    new Among2("esi", 55, -1),
    new Among2("iesi", 58, -1),
    new Among2("siesi", 59, -1),
    new Among2("isi", 55, -1),
    new Among2("aisi", 61, -1),
    new Among2("eisi", 61, -1),
    new Among2("tumeisi", 63, -1),
    new Among2("uisi", 61, -1),
    new Among2("osi", 55, -1),
    new Among2("\u0117josi", 66, -1),
    new Among2("uosi", 66, -1),
    new Among2("iuosi", 68, -1),
    new Among2("siuosi", 69, -1),
    new Among2("usi", 55, -1),
    new Among2("ausi", 71, -1),
    new Among2("\u010Diausi", 72, -1),
    new Among2("\u0105si", 55, -1),
    new Among2("\u0117si", 55, -1),
    new Among2("\u0173si", 55, -1),
    new Among2("t\u0173si", 76, -1),
    new Among2("ti", 44, -1),
    new Among2("enti", 78, -1),
    new Among2("inti", 78, -1),
    new Among2("oti", 78, -1),
    new Among2("ioti", 81, -1),
    new Among2("uoti", 81, -1),
    new Among2("iuoti", 83, -1),
    new Among2("auti", 78, -1),
    new Among2("iauti", 85, -1),
    new Among2("yti", 78, -1),
    new Among2("\u0117ti", 78, -1),
    new Among2("tel\u0117ti", 88, -1),
    new Among2("in\u0117ti", 88, -1),
    new Among2("ter\u0117ti", 88, -1),
    new Among2("ui", 44, -1),
    new Among2("iui", 92, -1),
    new Among2("eniui", 93, -1),
    new Among2("oj", -1, -1),
    new Among2("\u0117j", -1, -1),
    new Among2("k", -1, -1),
    new Among2("am", -1, -1),
    new Among2("iam", 98, -1),
    new Among2("iem", -1, -1),
    new Among2("im", -1, -1),
    new Among2("sim", 101, -1),
    new Among2("om", -1, -1),
    new Among2("tum", -1, -1),
    new Among2("\u0117m", -1, -1),
    new Among2("tum\u0117m", 105, -1),
    new Among2("an", -1, -1),
    new Among2("on", -1, -1),
    new Among2("ion", 108, -1),
    new Among2("un", -1, -1),
    new Among2("iun", 110, -1),
    new Among2("\u0117n", -1, -1),
    new Among2("o", -1, -1),
    new Among2("io", 113, -1),
    new Among2("enio", 114, -1),
    new Among2("\u0117jo", 113, -1),
    new Among2("uo", 113, -1),
    new Among2("s", -1, -1),
    new Among2("as", 118, -1),
    new Among2("ias", 119, -1),
    new Among2("es", 118, -1),
    new Among2("ies", 121, -1),
    new Among2("is", 118, -1),
    new Among2("ais", 123, -1),
    new Among2("iais", 124, -1),
    new Among2("tumeis", 123, -1),
    new Among2("imis", 123, -1),
    new Among2("enimis", 127, -1),
    new Among2("omis", 123, -1),
    new Among2("iomis", 129, -1),
    new Among2("umis", 123, -1),
    new Among2("\u0117mis", 123, -1),
    new Among2("enis", 123, -1),
    new Among2("asis", 123, -1),
    new Among2("ysis", 123, -1),
    new Among2("ams", 118, -1),
    new Among2("iams", 136, -1),
    new Among2("iems", 118, -1),
    new Among2("ims", 118, -1),
    new Among2("enims", 139, -1),
    new Among2("erims", 139, -1),
    new Among2("oms", 118, -1),
    new Among2("ioms", 142, -1),
    new Among2("ums", 118, -1),
    new Among2("\u0117ms", 118, -1),
    new Among2("ens", 118, -1),
    new Among2("os", 118, -1),
    new Among2("ios", 147, -1),
    new Among2("uos", 147, -1),
    new Among2("iuos", 149, -1),
    new Among2("ers", 118, -1),
    new Among2("us", 118, -1),
    new Among2("aus", 152, -1),
    new Among2("iaus", 153, -1),
    new Among2("ius", 152, -1),
    new Among2("ys", 118, -1),
    new Among2("enys", 156, -1),
    new Among2("erys", 156, -1),
    new Among2("\u0105s", 118, -1),
    new Among2("i\u0105s", 159, -1),
    new Among2("\u0117s", 118, -1),
    new Among2("am\u0117s", 161, -1),
    new Among2("iam\u0117s", 162, -1),
    new Among2("im\u0117s", 161, -1),
    new Among2("kim\u0117s", 164, -1),
    new Among2("sim\u0117s", 164, -1),
    new Among2("om\u0117s", 161, -1),
    new Among2("\u0117m\u0117s", 161, -1),
    new Among2("tum\u0117m\u0117s", 168, -1),
    new Among2("at\u0117s", 161, -1),
    new Among2("iat\u0117s", 170, -1),
    new Among2("sit\u0117s", 161, -1),
    new Among2("ot\u0117s", 161, -1),
    new Among2("\u0117t\u0117s", 161, -1),
    new Among2("tum\u0117t\u0117s", 174, -1),
    new Among2("\u012Fs", 118, -1),
    new Among2("\u016Bs", 118, -1),
    new Among2("t\u0173s", 118, -1),
    new Among2("at", -1, -1),
    new Among2("iat", 179, -1),
    new Among2("it", -1, -1),
    new Among2("sit", 181, -1),
    new Among2("ot", -1, -1),
    new Among2("\u0117t", -1, -1),
    new Among2("tum\u0117t", 184, -1),
    new Among2("u", -1, -1),
    new Among2("au", 186, -1),
    new Among2("iau", 187, -1),
    new Among2("\u010Diau", 188, -1),
    new Among2("iu", 186, -1),
    new Among2("eniu", 190, -1),
    new Among2("siu", 190, -1),
    new Among2("y", -1, -1),
    new Among2("\u0105", -1, -1),
    new Among2("i\u0105", 194, -1),
    new Among2("\u0117", -1, -1),
    new Among2("\u0119", -1, -1),
    new Among2("\u012F", -1, -1),
    new Among2("en\u012F", 198, -1),
    new Among2("er\u012F", 198, -1),
    new Among2("\u0173", -1, -1),
    new Among2("i\u0173", 201, -1),
    new Among2("er\u0173", 201, -1)
};

private final static Among2 a_1[] = {
    new Among2("ing", -1, -1),
    new Among2("aj", -1, -1),
    new Among2("iaj", 1, -1),
    new Among2("iej", -1, -1),
    new Among2("oj", -1, -1),
    new Among2("ioj", 4, -1),
    new Among2("uoj", 4, -1),
    new Among2("iuoj", 6, -1),
    new Among2("auj", -1, -1),
    new Among2("\u0105j", -1, -1),
    new Among2("i\u0105j", 9, -1),
    new Among2("\u0117j", -1, -1),
    new Among2("\u0173j", -1, -1),
    new Among2("i\u0173j", 12, -1),
    new Among2("ok", -1, -1),
    new Among2("iok", 14, -1),
    new Among2("iuk", -1, -1),
    new Among2("uliuk", 16, -1),
    new Among2("u\u010Diuk", 16, -1),
    new Among2("i\u0161k", -1, -1),
    new Among2("iul", -1, -1),
    new Among2("yl", -1, -1),
    new Among2("\u0117l", -1, -1),
    new Among2("am", -1, -1),
    new Among2("dam", 23, -1),
    new Among2("jam", 23, -1),
    new Among2("zgan", -1, -1),
    new Among2("ain", -1, -1),
    new Among2("esn", -1, -1),
    new Among2("op", -1, -1),
    new Among2("iop", 29, -1),
    new Among2("ias", -1, -1),
    new Among2("ies", -1, -1),
    new Among2("ais", -1, -1),
    new Among2("iais", 33, -1),
    new Among2("os", -1, -1),
    new Among2("ios", 35, -1),
    new Among2("uos", 35, -1),
    new Among2("iuos", 37, -1),
    new Among2("aus", -1, -1),
    new Among2("iaus", 39, -1),
    new Among2("\u0105s", -1, -1),
    new Among2("i\u0105s", 41, -1),
    new Among2("\u0119s", -1, -1),
    new Among2("ut\u0117ait", -1, -1),
    new Among2("ant", -1, -1),
    new Among2("iant", 45, -1),
    new Among2("siant", 46, -1),
    new Among2("int", -1, -1),
    new Among2("ot", -1, -1),
    new Among2("uot", 49, -1),
    new Among2("iuot", 50, -1),
    new Among2("yt", -1, -1),
    new Among2("\u0117t", -1, -1),
    new Among2("yk\u0161t", -1, -1),
    new Among2("iau", -1, -1),
    new Among2("dav", -1, -1),
    new Among2("sv", -1, -1),
    new Among2("\u0161v", -1, -1),
    new Among2("yk\u0161\u010D", -1, -1),
    new Among2("\u0119", -1, -1),
    new Among2("\u0117j\u0119", 60, -1)
};

private final static Among2 a_2[] = {
    new Among2("ojime", -1, 7),
    new Among2("\u0117jime", -1, 3),
    new Among2("avime", -1, 6),
    new Among2("okate", -1, 8),
    new Among2("aite", -1, 1),
    new Among2("uote", -1, 2),
    new Among2("asius", -1, 5),
    new Among2("okat\u0117s", -1, 8),
    new Among2("ait\u0117s", -1, 1),
    new Among2("uot\u0117s", -1, 2),
    new Among2("esiu", -1, 4)
};

private final static Among2 a_3[] = {
    new Among2("\u010D", -1, 1),
    new Among2("d\u017E", -1, 2)
};

private final static Among2 a_4[] = {
    new Among2("gd", -1, 1)
};

private static final char g_v[] = {17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 64, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 4 };

private int I_p1;


private boolean r_R1() {
    if (!(I_p1 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_step1() {
    // (, line 44
    // setlimit, line 45
    if (cursor < I_p1)
    {
        return false;
    }
    int v_2 = limit_backward;
    limit_backward = I_p1;
    // (, line 45
    // [, line 45
    ket = cursor;
    // substring, line 45
    if (find_among_b(a_0) == 0)
    {
        limit_backward = v_2;
        return false;
    }
    // ], line 45
    bra = cursor;
    limit_backward = v_2;
    // call R1, line 45
    if (!r_R1())
    {
        return false;
    }
    // delete, line 229
    slice_del();
    return true;
}

private boolean r_step2() {
    // repeat, line 232
    while(true)
    {
        int v_1 = limit - cursor;
        lab0: {
            // (, line 232
            // setlimit, line 233
            if (cursor < I_p1)
            {
                break lab0;
            }
            int v_3 = limit_backward;
            limit_backward = I_p1;
            // (, line 233
            // [, line 233
            ket = cursor;
            // substring, line 233
            if (find_among_b(a_1) == 0)
            {
                limit_backward = v_3;
                break lab0;
            }
            // ], line 233
            bra = cursor;
            limit_backward = v_3;
            // delete, line 303
            slice_del();
            continue;
        }
        cursor = limit - v_1;
        break;
    }
    return true;
}

private boolean r_fix_conflicts() {
    int among_var;
    // (, line 306
    // [, line 307
    ket = cursor;
    // substring, line 307
    among_var = find_among_b(a_2);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 307
    bra = cursor;
    switch (among_var) {
        case 1:
            // (, line 309
            // <-, line 309
            slice_from("ait\u0117");
            break;
        case 2:
            // (, line 314
            // <-, line 314
            slice_from("uot\u0117");
            break;
        case 3:
            // (, line 319
            // <-, line 319
            slice_from("\u0117jimas");
            break;
        case 4:
            // (, line 322
            // <-, line 322
            slice_from("esys");
            break;
        case 5:
            // (, line 324
            // <-, line 324
            slice_from("asys");
            break;
        case 6:
            // (, line 327
            // <-, line 327
            slice_from("avimas");
            break;
        case 7:
            // (, line 328
            // <-, line 328
            slice_from("ojimas");
            break;
        case 8:
            // (, line 331
            // <-, line 331
            slice_from("okat\u0117");
            break;
    }
    return true;
}

private boolean r_fix_chdz() {
    int among_var;
    // (, line 337
    // [, line 338
    ket = cursor;
    // substring, line 338
    among_var = find_among_b(a_3);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 338
    bra = cursor;
    switch (among_var) {
        case 1:
            // (, line 339
            // <-, line 339
            slice_from("t");
            break;
        case 2:
            // (, line 340
            // <-, line 340
            slice_from("d");
            break;
    }
    return true;
}

private boolean r_fix_gd() {
    // (, line 344
    // [, line 345
    ket = cursor;
    // substring, line 345
    if (find_among_b(a_4) == 0)
    {
        return false;
    }
    // ], line 345
    bra = cursor;
    // (, line 346
    // <-, line 346
    slice_from("g");
    return true;
}

public boolean stem() {
    // (, line 353
    I_p1 = limit;
    // do, line 357
    int v_1 = cursor;
    lab0: {
        // (, line 357
        // try, line 359
        int v_2 = cursor;
        lab1: {
            // (, line 359
            // test, line 359
            int v_3 = cursor;
            // literal, line 359
            if (!(eq_s("a")))
            {
                cursor = v_2;
                break lab1;
            }
            cursor = v_3;
            if (!(current.length() > 6))
            {
                cursor = v_2;
                break lab1;
            }
            // hop, line 359
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    cursor = v_2;
                    break lab1;
                }
                cursor = c;
            }
        }
        // gopast, line 361
        golab2: while(true)
        {
            lab3: {
                if (!(in_grouping(g_v, 97, 371)))
                {
                    break lab3;
                }
                break golab2;
            }
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // gopast, line 361
        golab4: while(true)
        {
            lab5: {
                if (!(out_grouping(g_v, 97, 371)))
                {
                    break lab5;
                }
                break golab4;
            }
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // setmark p1, line 361
        I_p1 = cursor;
    }
    cursor = v_1;
    // backwards, line 364
    limit_backward = cursor;
    cursor = limit;
    // (, line 364
    // do, line 365
    int v_6 = limit - cursor;
    // call fix_conflicts, line 365
    r_fix_conflicts();
    cursor = limit - v_6;
    // do, line 366
    int v_7 = limit - cursor;
    // call step1, line 366
    r_step1();
    cursor = limit - v_7;
    // do, line 367
    int v_8 = limit - cursor;
    // call fix_chdz, line 367
    r_fix_chdz();
    cursor = limit - v_8;
    // do, line 368
    int v_9 = limit - cursor;
    // call step2, line 368
    r_step2();
    cursor = limit - v_9;
    // do, line 369
    int v_10 = limit - cursor;
    // call fix_chdz, line 369
    r_fix_chdz();
    cursor = limit - v_10;
    // do, line 370
    int v_11 = limit - cursor;
    // call fix_gd, line 370
    r_fix_gd();
    cursor = limit - v_11;
    cursor = limit_backward;
    return true;
}

@Override
public boolean equals( Object o ) {
    return o instanceof lithuanianStemmer;
}

@Override
public int hashCode() {
    return lithuanianStemmer.class.getName().hashCode();
}



}

