// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among2;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class catalanStemmer extends org.tartarus.snowball.SnowballStemmer {

    private static final long serialVersionUID = 1L;

private final static Among2 a_0[] = {
    new Among2("", -1, 7),
    new Among2("\u00B7", 0, 6),
    new Among2("\u00E0", 0, 1),
    new Among2("\u00E1", 0, 1),
    new Among2("\u00E8", 0, 2),
    new Among2("\u00E9", 0, 2),
    new Among2("\u00EC", 0, 3),
    new Among2("\u00ED", 0, 3),
    new Among2("\u00EF", 0, 3),
    new Among2("\u00F2", 0, 4),
    new Among2("\u00F3", 0, 4),
    new Among2("\u00FA", 0, 5),
    new Among2("\u00FC", 0, 5)
};

private final static Among2 a_1[] = {
    new Among2("la", -1, 1),
    new Among2("-la", 0, 1),
    new Among2("sela", 0, 1),
    new Among2("le", -1, 1),
    new Among2("me", -1, 1),
    new Among2("-me", 4, 1),
    new Among2("se", -1, 1),
    new Among2("-te", -1, 1),
    new Among2("hi", -1, 1),
    new Among2("'hi", 8, 1),
    new Among2("li", -1, 1),
    new Among2("-li", 10, 1),
    new Among2("'l", -1, 1),
    new Among2("'m", -1, 1),
    new Among2("-m", -1, 1),
    new Among2("'n", -1, 1),
    new Among2("-n", -1, 1),
    new Among2("ho", -1, 1),
    new Among2("'ho", 17, 1),
    new Among2("lo", -1, 1),
    new Among2("selo", 19, 1),
    new Among2("'s", -1, 1),
    new Among2("las", -1, 1),
    new Among2("selas", 22, 1),
    new Among2("les", -1, 1),
    new Among2("-les", 24, 1),
    new Among2("'ls", -1, 1),
    new Among2("-ls", -1, 1),
    new Among2("'ns", -1, 1),
    new Among2("-ns", -1, 1),
    new Among2("ens", -1, 1),
    new Among2("los", -1, 1),
    new Among2("selos", 31, 1),
    new Among2("nos", -1, 1),
    new Among2("-nos", 33, 1),
    new Among2("vos", -1, 1),
    new Among2("us", -1, 1),
    new Among2("-us", 36, 1),
    new Among2("'t", -1, 1)
};

private final static Among2 a_2[] = {
    new Among2("ica", -1, 4),
    new Among2("l\u00F3gica", 0, 3),
    new Among2("enca", -1, 1),
    new Among2("ada", -1, 2),
    new Among2("ancia", -1, 1),
    new Among2("encia", -1, 1),
    new Among2("\u00E8ncia", -1, 1),
    new Among2("\u00EDcia", -1, 1),
    new Among2("logia", -1, 3),
    new Among2("inia", -1, 1),
    new Among2("\u00EDinia", 9, 1),
    new Among2("eria", -1, 1),
    new Among2("\u00E0ria", -1, 1),
    new Among2("at\u00F2ria", -1, 1),
    new Among2("alla", -1, 1),
    new Among2("ella", -1, 1),
    new Among2("\u00EDvola", -1, 1),
    new Among2("ima", -1, 1),
    new Among2("\u00EDssima", 17, 1),
    new Among2("qu\u00EDssima", 18, 5),
    new Among2("ana", -1, 1),
    new Among2("ina", -1, 1),
    new Among2("era", -1, 1),
    new Among2("sfera", 22, 1),
    new Among2("ora", -1, 1),
    new Among2("dora", 24, 1),
    new Among2("adora", 25, 1),
    new Among2("adura", -1, 1),
    new Among2("esa", -1, 1),
    new Among2("osa", -1, 1),
    new Among2("assa", -1, 1),
    new Among2("essa", -1, 1),
    new Among2("issa", -1, 1),
    new Among2("eta", -1, 1),
    new Among2("ita", -1, 1),
    new Among2("ota", -1, 1),
    new Among2("ista", -1, 1),
    new Among2("ialista", 36, 1),
    new Among2("ionista", 36, 1),
    new Among2("iva", -1, 1),
    new Among2("ativa", 39, 1),
    new Among2("n\u00E7a", -1, 1),
    new Among2("log\u00EDa", -1, 3),
    new Among2("ic", -1, 4),
    new Among2("\u00EDstic", 43, 1),
    new Among2("enc", -1, 1),
    new Among2("esc", -1, 1),
    new Among2("ud", -1, 1),
    new Among2("atge", -1, 1),
    new Among2("ble", -1, 1),
    new Among2("able", 49, 1),
    new Among2("ible", 49, 1),
    new Among2("isme", -1, 1),
    new Among2("ialisme", 52, 1),
    new Among2("ionisme", 52, 1),
    new Among2("ivisme", 52, 1),
    new Among2("aire", -1, 1),
    new Among2("icte", -1, 1),
    new Among2("iste", -1, 1),
    new Among2("ici", -1, 1),
    new Among2("\u00EDci", -1, 1),
    new Among2("logi", -1, 3),
    new Among2("ari", -1, 1),
    new Among2("tori", -1, 1),
    new Among2("al", -1, 1),
    new Among2("il", -1, 1),
    new Among2("all", -1, 1),
    new Among2("ell", -1, 1),
    new Among2("\u00EDvol", -1, 1),
    new Among2("isam", -1, 1),
    new Among2("issem", -1, 1),
    new Among2("\u00ECssem", -1, 1),
    new Among2("\u00EDssem", -1, 1),
    new Among2("\u00EDssim", -1, 1),
    new Among2("qu\u00EDssim", 73, 5),
    new Among2("amen", -1, 1),
    new Among2("\u00ECssin", -1, 1),
    new Among2("ar", -1, 1),
    new Among2("ificar", 77, 1),
    new Among2("egar", 77, 1),
    new Among2("ejar", 77, 1),
    new Among2("itar", 77, 1),
    new Among2("itzar", 77, 1),
    new Among2("fer", -1, 1),
    new Among2("or", -1, 1),
    new Among2("dor", 84, 1),
    new Among2("dur", -1, 1),
    new Among2("doras", -1, 1),
    new Among2("ics", -1, 4),
    new Among2("l\u00F3gics", 88, 3),
    new Among2("uds", -1, 1),
    new Among2("nces", -1, 1),
    new Among2("ades", -1, 2),
    new Among2("ancies", -1, 1),
    new Among2("encies", -1, 1),
    new Among2("\u00E8ncies", -1, 1),
    new Among2("\u00EDcies", -1, 1),
    new Among2("logies", -1, 3),
    new Among2("inies", -1, 1),
    new Among2("\u00EDnies", -1, 1),
    new Among2("eries", -1, 1),
    new Among2("\u00E0ries", -1, 1),
    new Among2("at\u00F2ries", -1, 1),
    new Among2("bles", -1, 1),
    new Among2("ables", 103, 1),
    new Among2("ibles", 103, 1),
    new Among2("imes", -1, 1),
    new Among2("\u00EDssimes", 106, 1),
    new Among2("qu\u00EDssimes", 107, 5),
    new Among2("formes", -1, 1),
    new Among2("ismes", -1, 1),
    new Among2("ialismes", 110, 1),
    new Among2("ines", -1, 1),
    new Among2("eres", -1, 1),
    new Among2("ores", -1, 1),
    new Among2("dores", 114, 1),
    new Among2("idores", 115, 1),
    new Among2("dures", -1, 1),
    new Among2("eses", -1, 1),
    new Among2("oses", -1, 1),
    new Among2("asses", -1, 1),
    new Among2("ictes", -1, 1),
    new Among2("ites", -1, 1),
    new Among2("otes", -1, 1),
    new Among2("istes", -1, 1),
    new Among2("ialistes", 124, 1),
    new Among2("ionistes", 124, 1),
    new Among2("iques", -1, 4),
    new Among2("l\u00F3giques", 127, 3),
    new Among2("ives", -1, 1),
    new Among2("atives", 129, 1),
    new Among2("log\u00EDes", -1, 3),
    new Among2("alleng\u00FCes", -1, 1),
    new Among2("icis", -1, 1),
    new Among2("\u00EDcis", -1, 1),
    new Among2("logis", -1, 3),
    new Among2("aris", -1, 1),
    new Among2("toris", -1, 1),
    new Among2("ls", -1, 1),
    new Among2("als", 138, 1),
    new Among2("ells", 138, 1),
    new Among2("ims", -1, 1),
    new Among2("\u00EDssims", 141, 1),
    new Among2("qu\u00EDssims", 142, 5),
    new Among2("ions", -1, 1),
    new Among2("cions", 144, 1),
    new Among2("acions", 145, 2),
    new Among2("esos", -1, 1),
    new Among2("osos", -1, 1),
    new Among2("assos", -1, 1),
    new Among2("issos", -1, 1),
    new Among2("ers", -1, 1),
    new Among2("ors", -1, 1),
    new Among2("dors", 152, 1),
    new Among2("adors", 153, 1),
    new Among2("idors", 153, 1),
    new Among2("ats", -1, 1),
    new Among2("itats", 156, 1),
    new Among2("bilitats", 157, 1),
    new Among2("ivitats", 157, 1),
    new Among2("ativitats", 159, 1),
    new Among2("\u00EFtats", 156, 1),
    new Among2("ets", -1, 1),
    new Among2("ants", -1, 1),
    new Among2("ents", -1, 1),
    new Among2("ments", 164, 1),
    new Among2("aments", 165, 1),
    new Among2("ots", -1, 1),
    new Among2("uts", -1, 1),
    new Among2("ius", -1, 1),
    new Among2("trius", 169, 1),
    new Among2("atius", 169, 1),
    new Among2("\u00E8s", -1, 1),
    new Among2("\u00E9s", -1, 1),
    new Among2("\u00EDs", -1, 1),
    new Among2("d\u00EDs", 174, 1),
    new Among2("\u00F3s", -1, 1),
    new Among2("itat", -1, 1),
    new Among2("bilitat", 177, 1),
    new Among2("ivitat", 177, 1),
    new Among2("ativitat", 179, 1),
    new Among2("\u00EFtat", -1, 1),
    new Among2("et", -1, 1),
    new Among2("ant", -1, 1),
    new Among2("ent", -1, 1),
    new Among2("ient", 184, 1),
    new Among2("ment", 184, 1),
    new Among2("ament", 186, 1),
    new Among2("isament", 187, 1),
    new Among2("ot", -1, 1),
    new Among2("isseu", -1, 1),
    new Among2("\u00ECsseu", -1, 1),
    new Among2("\u00EDsseu", -1, 1),
    new Among2("triu", -1, 1),
    new Among2("\u00EDssiu", -1, 1),
    new Among2("atiu", -1, 1),
    new Among2("\u00F3", -1, 1),
    new Among2("i\u00F3", 196, 1),
    new Among2("ci\u00F3", 197, 1),
    new Among2("aci\u00F3", 198, 1)
};

private final static Among2 a_3[] = {
    new Among2("aba", -1, 1),
    new Among2("esca", -1, 1),
    new Among2("isca", -1, 1),
    new Among2("\u00EFsca", -1, 1),
    new Among2("ada", -1, 1),
    new Among2("ida", -1, 1),
    new Among2("uda", -1, 1),
    new Among2("\u00EFda", -1, 1),
    new Among2("ia", -1, 1),
    new Among2("aria", 8, 1),
    new Among2("iria", 8, 1),
    new Among2("ara", -1, 1),
    new Among2("iera", -1, 1),
    new Among2("ira", -1, 1),
    new Among2("adora", -1, 1),
    new Among2("\u00EFra", -1, 1),
    new Among2("ava", -1, 1),
    new Among2("ixa", -1, 1),
    new Among2("itza", -1, 1),
    new Among2("\u00EDa", -1, 1),
    new Among2("ar\u00EDa", 19, 1),
    new Among2("er\u00EDa", 19, 1),
    new Among2("ir\u00EDa", 19, 1),
    new Among2("\u00EFa", -1, 1),
    new Among2("isc", -1, 1),
    new Among2("\u00EFsc", -1, 1),
    new Among2("ad", -1, 1),
    new Among2("ed", -1, 1),
    new Among2("id", -1, 1),
    new Among2("ie", -1, 1),
    new Among2("re", -1, 1),
    new Among2("dre", 30, 1),
    new Among2("ase", -1, 1),
    new Among2("iese", -1, 1),
    new Among2("aste", -1, 1),
    new Among2("iste", -1, 1),
    new Among2("ii", -1, 1),
    new Among2("ini", -1, 1),
    new Among2("esqui", -1, 1),
    new Among2("eixi", -1, 1),
    new Among2("itzi", -1, 1),
    new Among2("am", -1, 1),
    new Among2("em", -1, 1),
    new Among2("arem", 42, 1),
    new Among2("irem", 42, 1),
    new Among2("\u00E0rem", 42, 1),
    new Among2("\u00EDrem", 42, 1),
    new Among2("\u00E0ssem", 42, 1),
    new Among2("\u00E9ssem", 42, 1),
    new Among2("iguem", 42, 1),
    new Among2("\u00EFguem", 42, 1),
    new Among2("avem", 42, 1),
    new Among2("\u00E0vem", 42, 1),
    new Among2("\u00E1vem", 42, 1),
    new Among2("ir\u00ECem", 42, 1),
    new Among2("\u00EDem", 42, 1),
    new Among2("ar\u00EDem", 55, 1),
    new Among2("ir\u00EDem", 55, 1),
    new Among2("assim", -1, 1),
    new Among2("essim", -1, 1),
    new Among2("issim", -1, 1),
    new Among2("\u00E0ssim", -1, 1),
    new Among2("\u00E8ssim", -1, 1),
    new Among2("\u00E9ssim", -1, 1),
    new Among2("\u00EDssim", -1, 1),
    new Among2("\u00EFm", -1, 1),
    new Among2("an", -1, 1),
    new Among2("aban", 66, 1),
    new Among2("arian", 66, 1),
    new Among2("aran", 66, 1),
    new Among2("ieran", 66, 1),
    new Among2("iran", 66, 1),
    new Among2("\u00EDan", 66, 1),
    new Among2("ar\u00EDan", 72, 1),
    new Among2("er\u00EDan", 72, 1),
    new Among2("ir\u00EDan", 72, 1),
    new Among2("en", -1, 1),
    new Among2("ien", 76, 1),
    new Among2("arien", 77, 1),
    new Among2("irien", 77, 1),
    new Among2("aren", 76, 1),
    new Among2("eren", 76, 1),
    new Among2("iren", 76, 1),
    new Among2("\u00E0ren", 76, 1),
    new Among2("\u00EFren", 76, 1),
    new Among2("asen", 76, 1),
    new Among2("iesen", 76, 1),
    new Among2("assen", 76, 1),
    new Among2("essen", 76, 1),
    new Among2("issen", 76, 1),
    new Among2("\u00E9ssen", 76, 1),
    new Among2("\u00EFssen", 76, 1),
    new Among2("esquen", 76, 1),
    new Among2("isquen", 76, 1),
    new Among2("\u00EFsquen", 76, 1),
    new Among2("aven", 76, 1),
    new Among2("ixen", 76, 1),
    new Among2("eixen", 96, 1),
    new Among2("\u00EFxen", 76, 1),
    new Among2("\u00EFen", 76, 1),
    new Among2("in", -1, 1),
    new Among2("inin", 100, 1),
    new Among2("sin", 100, 1),
    new Among2("isin", 102, 1),
    new Among2("assin", 102, 1),
    new Among2("essin", 102, 1),
    new Among2("issin", 102, 1),
    new Among2("\u00EFssin", 102, 1),
    new Among2("esquin", 100, 1),
    new Among2("eixin", 100, 1),
    new Among2("aron", -1, 1),
    new Among2("ieron", -1, 1),
    new Among2("ar\u00E1n", -1, 1),
    new Among2("er\u00E1n", -1, 1),
    new Among2("ir\u00E1n", -1, 1),
    new Among2("i\u00EFn", -1, 1),
    new Among2("ado", -1, 1),
    new Among2("ido", -1, 1),
    new Among2("ando", -1, 2),
    new Among2("iendo", -1, 1),
    new Among2("io", -1, 1),
    new Among2("ixo", -1, 1),
    new Among2("eixo", 121, 1),
    new Among2("\u00EFxo", -1, 1),
    new Among2("itzo", -1, 1),
    new Among2("ar", -1, 1),
    new Among2("tzar", 125, 1),
    new Among2("er", -1, 1),
    new Among2("eixer", 127, 1),
    new Among2("ir", -1, 1),
    new Among2("ador", -1, 1),
    new Among2("as", -1, 1),
    new Among2("abas", 131, 1),
    new Among2("adas", 131, 1),
    new Among2("idas", 131, 1),
    new Among2("aras", 131, 1),
    new Among2("ieras", 131, 1),
    new Among2("\u00EDas", 131, 1),
    new Among2("ar\u00EDas", 137, 1),
    new Among2("er\u00EDas", 137, 1),
    new Among2("ir\u00EDas", 137, 1),
    new Among2("ids", -1, 1),
    new Among2("es", -1, 1),
    new Among2("ades", 142, 1),
    new Among2("ides", 142, 1),
    new Among2("udes", 142, 1),
    new Among2("\u00EFdes", 142, 1),
    new Among2("atges", 142, 1),
    new Among2("ies", 142, 1),
    new Among2("aries", 148, 1),
    new Among2("iries", 148, 1),
    new Among2("ares", 142, 1),
    new Among2("ires", 142, 1),
    new Among2("adores", 142, 1),
    new Among2("\u00EFres", 142, 1),
    new Among2("ases", 142, 1),
    new Among2("ieses", 142, 1),
    new Among2("asses", 142, 1),
    new Among2("esses", 142, 1),
    new Among2("isses", 142, 1),
    new Among2("\u00EFsses", 142, 1),
    new Among2("ques", 142, 1),
    new Among2("esques", 161, 1),
    new Among2("\u00EFsques", 161, 1),
    new Among2("aves", 142, 1),
    new Among2("ixes", 142, 1),
    new Among2("eixes", 165, 1),
    new Among2("\u00EFxes", 142, 1),
    new Among2("\u00EFes", 142, 1),
    new Among2("abais", -1, 1),
    new Among2("arais", -1, 1),
    new Among2("ierais", -1, 1),
    new Among2("\u00EDais", -1, 1),
    new Among2("ar\u00EDais", 172, 1),
    new Among2("er\u00EDais", 172, 1),
    new Among2("ir\u00EDais", 172, 1),
    new Among2("aseis", -1, 1),
    new Among2("ieseis", -1, 1),
    new Among2("asteis", -1, 1),
    new Among2("isteis", -1, 1),
    new Among2("inis", -1, 1),
    new Among2("sis", -1, 1),
    new Among2("isis", 181, 1),
    new Among2("assis", 181, 1),
    new Among2("essis", 181, 1),
    new Among2("issis", 181, 1),
    new Among2("\u00EFssis", 181, 1),
    new Among2("esquis", -1, 1),
    new Among2("eixis", -1, 1),
    new Among2("itzis", -1, 1),
    new Among2("\u00E1is", -1, 1),
    new Among2("ar\u00E9is", -1, 1),
    new Among2("er\u00E9is", -1, 1),
    new Among2("ir\u00E9is", -1, 1),
    new Among2("ams", -1, 1),
    new Among2("ados", -1, 1),
    new Among2("idos", -1, 1),
    new Among2("amos", -1, 1),
    new Among2("\u00E1bamos", 197, 1),
    new Among2("\u00E1ramos", 197, 1),
    new Among2("i\u00E9ramos", 197, 1),
    new Among2("\u00EDamos", 197, 1),
    new Among2("ar\u00EDamos", 201, 1),
    new Among2("er\u00EDamos", 201, 1),
    new Among2("ir\u00EDamos", 201, 1),
    new Among2("aremos", -1, 1),
    new Among2("eremos", -1, 1),
    new Among2("iremos", -1, 1),
    new Among2("\u00E1semos", -1, 1),
    new Among2("i\u00E9semos", -1, 1),
    new Among2("imos", -1, 1),
    new Among2("adors", -1, 1),
    new Among2("ass", -1, 1),
    new Among2("erass", 212, 1),
    new Among2("ess", -1, 1),
    new Among2("ats", -1, 1),
    new Among2("its", -1, 1),
    new Among2("ents", -1, 1),
    new Among2("\u00E0s", -1, 1),
    new Among2("ar\u00E0s", 218, 1),
    new Among2("ir\u00E0s", 218, 1),
    new Among2("ar\u00E1s", -1, 1),
    new Among2("er\u00E1s", -1, 1),
    new Among2("ir\u00E1s", -1, 1),
    new Among2("\u00E9s", -1, 1),
    new Among2("ar\u00E9s", 224, 1),
    new Among2("\u00EDs", -1, 1),
    new Among2("i\u00EFs", -1, 1),
    new Among2("at", -1, 1),
    new Among2("it", -1, 1),
    new Among2("ant", -1, 1),
    new Among2("ent", -1, 1),
    new Among2("int", -1, 1),
    new Among2("ut", -1, 1),
    new Among2("\u00EFt", -1, 1),
    new Among2("au", -1, 1),
    new Among2("erau", 235, 1),
    new Among2("ieu", -1, 1),
    new Among2("ineu", -1, 1),
    new Among2("areu", -1, 1),
    new Among2("ireu", -1, 1),
    new Among2("\u00E0reu", -1, 1),
    new Among2("\u00EDreu", -1, 1),
    new Among2("asseu", -1, 1),
    new Among2("esseu", -1, 1),
    new Among2("eresseu", 244, 1),
    new Among2("\u00E0sseu", -1, 1),
    new Among2("\u00E9sseu", -1, 1),
    new Among2("igueu", -1, 1),
    new Among2("\u00EFgueu", -1, 1),
    new Among2("\u00E0veu", -1, 1),
    new Among2("\u00E1veu", -1, 1),
    new Among2("itzeu", -1, 1),
    new Among2("\u00ECeu", -1, 1),
    new Among2("ir\u00ECeu", 253, 1),
    new Among2("\u00EDeu", -1, 1),
    new Among2("ar\u00EDeu", 255, 1),
    new Among2("ir\u00EDeu", 255, 1),
    new Among2("assiu", -1, 1),
    new Among2("issiu", -1, 1),
    new Among2("\u00E0ssiu", -1, 1),
    new Among2("\u00E8ssiu", -1, 1),
    new Among2("\u00E9ssiu", -1, 1),
    new Among2("\u00EDssiu", -1, 1),
    new Among2("\u00EFu", -1, 1),
    new Among2("ix", -1, 1),
    new Among2("eix", 265, 1),
    new Among2("\u00EFx", -1, 1),
    new Among2("itz", -1, 1),
    new Among2("i\u00E0", -1, 1),
    new Among2("ar\u00E0", -1, 1),
    new Among2("ir\u00E0", -1, 1),
    new Among2("itz\u00E0", -1, 1),
    new Among2("ar\u00E1", -1, 1),
    new Among2("er\u00E1", -1, 1),
    new Among2("ir\u00E1", -1, 1),
    new Among2("ir\u00E8", -1, 1),
    new Among2("ar\u00E9", -1, 1),
    new Among2("er\u00E9", -1, 1),
    new Among2("ir\u00E9", -1, 1),
    new Among2("\u00ED", -1, 1),
    new Among2("i\u00EF", -1, 1),
    new Among2("i\u00F3", -1, 1)
};

private final static Among2 a_4[] = {
    new Among2("a", -1, 1),
    new Among2("e", -1, 1),
    new Among2("i", -1, 1),
    new Among2("\u00EFn", -1, 1),
    new Among2("o", -1, 1),
    new Among2("ir", -1, 1),
    new Among2("s", -1, 1),
    new Among2("is", 6, 1),
    new Among2("os", 6, 1),
    new Among2("\u00EFs", 6, 1),
    new Among2("it", -1, 1),
    new Among2("eu", -1, 1),
    new Among2("iu", -1, 1),
    new Among2("iqu", -1, 2),
    new Among2("itz", -1, 1),
    new Among2("\u00E0", -1, 1),
    new Among2("\u00E1", -1, 1),
    new Among2("\u00E9", -1, 1),
    new Among2("\u00EC", -1, 1),
    new Among2("\u00ED", -1, 1),
    new Among2("\u00EF", -1, 1),
    new Among2("\u00F3", -1, 1)
};

private static final char g_v[] = {17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 129, 81, 6, 10 };

private int I_p2;
private int I_p1;


private boolean r_mark_regions() {
    // (, line 36
    I_p1 = limit;
    I_p2 = limit;
    // do, line 41
    int v_1 = cursor;
    lab0: {
        // (, line 41
        // gopast, line 42
        golab1: while(true)
        {
            lab2: {
                if (!(in_grouping(g_v, 97, 252)))
                {
                    break lab2;
                }
                break golab1;
            }
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // gopast, line 42
        golab3: while(true)
        {
            lab4: {
                if (!(out_grouping(g_v, 97, 252)))
                {
                    break lab4;
                }
                break golab3;
            }
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // setmark p1, line 42
        I_p1 = cursor;
        // gopast, line 43
        golab5: while(true)
        {
            lab6: {
                if (!(in_grouping(g_v, 97, 252)))
                {
                    break lab6;
                }
                break golab5;
            }
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // gopast, line 43
        golab7: while(true)
        {
            lab8: {
                if (!(out_grouping(g_v, 97, 252)))
                {
                    break lab8;
                }
                break golab7;
            }
            if (cursor >= limit)
            {
                break lab0;
            }
            cursor++;
        }
        // setmark p2, line 43
        I_p2 = cursor;
    }
    cursor = v_1;
    return true;
}

private boolean r_cleaning() {
    int among_var;
    // repeat, line 47
    while(true)
    {
        int v_1 = cursor;
        lab0: {
            // (, line 47
            // [, line 48
            bra = cursor;
            // substring, line 48
            among_var = find_among(a_0);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 48
            ket = cursor;
            switch (among_var) {
                case 1:
                    // (, line 49
                    // <-, line 49
                    slice_from("a");
                    break;
                case 2:
                    // (, line 51
                    // <-, line 51
                    slice_from("e");
                    break;
                case 3:
                    // (, line 53
                    // <-, line 53
                    slice_from("i");
                    break;
                case 4:
                    // (, line 55
                    // <-, line 55
                    slice_from("o");
                    break;
                case 5:
                    // (, line 57
                    // <-, line 57
                    slice_from("u");
                    break;
                case 6:
                    // (, line 60
                    // <-, line 60
                    slice_from(".");
                    break;
                case 7:
                    // (, line 61
                    // next, line 61
                    if (cursor >= limit)
                    {
                        break lab0;
                    }
                    cursor++;
                    break;
            }
            continue;
        }
        cursor = v_1;
        break;
    }
    return true;
}

private boolean r_R1() {
    if (!(I_p1 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_R2() {
    if (!(I_p2 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_attached_pronoun() {
    // (, line 70
    // [, line 71
    ket = cursor;
    // substring, line 71
    if (find_among_b(a_1) == 0)
    {
        return false;
    }
    // ], line 71
    bra = cursor;
    // (, line 81
    // call R1, line 81
    if (!r_R1())
    {
        return false;
    }
    // delete, line 81
    slice_del();
    return true;
}

private boolean r_standard_suffix() {
    int among_var;
    // (, line 85
    // [, line 86
    ket = cursor;
    // substring, line 86
    among_var = find_among_b(a_2);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 86
    bra = cursor;
    switch (among_var) {
        case 1:
            // (, line 110
            // call R1, line 110
            if (!r_R1())
            {
                return false;
            }
            // delete, line 110
            slice_del();
            break;
        case 2:
            // (, line 112
            // call R2, line 112
            if (!r_R2())
            {
                return false;
            }
            // delete, line 112
            slice_del();
            break;
        case 3:
            // (, line 114
            // call R2, line 114
            if (!r_R2())
            {
                return false;
            }
            // <-, line 114
            slice_from("log");
            break;
        case 4:
            // (, line 116
            // call R2, line 116
            if (!r_R2())
            {
                return false;
            }
            // <-, line 116
            slice_from("ic");
            break;
        case 5:
            // (, line 118
            // call R1, line 118
            if (!r_R1())
            {
                return false;
            }
            // <-, line 118
            slice_from("c");
            break;
    }
    return true;
}

private boolean r_verb_suffix() {
    int among_var;
    // (, line 122
    // [, line 123
    ket = cursor;
    // substring, line 123
    among_var = find_among_b(a_3);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 123
    bra = cursor;
    switch (among_var) {
        case 1:
            // (, line 168
            // call R1, line 168
            if (!r_R1())
            {
                return false;
            }
            // delete, line 168
            slice_del();
            break;
        case 2:
            // (, line 170
            // call R2, line 170
            if (!r_R2())
            {
                return false;
            }
            // delete, line 170
            slice_del();
            break;
    }
    return true;
}

private boolean r_residual_suffix() {
    int among_var;
    // (, line 174
    // [, line 175
    ket = cursor;
    // substring, line 175
    among_var = find_among_b(a_4);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 175
    bra = cursor;
    switch (among_var) {
        case 1:
            // (, line 178
            // call R1, line 178
            if (!r_R1())
            {
                return false;
            }
            // delete, line 178
            slice_del();
            break;
        case 2:
            // (, line 180
            // call R1, line 180
            if (!r_R1())
            {
                return false;
            }
            // <-, line 180
            slice_from("ic");
            break;
    }
    return true;
}

public boolean stem() {
    // (, line 185
    // do, line 186
    // call mark_regions, line 186
    r_mark_regions();
    // backwards, line 187
    limit_backward = cursor;
    cursor = limit;
    // (, line 187
    // do, line 188
    int v_2 = limit - cursor;
    // call attached_pronoun, line 188
    r_attached_pronoun();
    cursor = limit - v_2;
    // do, line 189
    int v_3 = limit - cursor;
    lab0: {
        // (, line 189
        // or, line 189
        lab1: {
            int v_4 = limit - cursor;
            lab2: {
                // call standard_suffix, line 189
                if (!r_standard_suffix())
                {
                    break lab2;
                }
                break lab1;
            }
            cursor = limit - v_4;
            // call verb_suffix, line 190
            if (!r_verb_suffix())
            {
                break lab0;
            }
        }
    }
    cursor = limit - v_3;
    // do, line 192
    int v_5 = limit - cursor;
    // call residual_suffix, line 192
    r_residual_suffix();
    cursor = limit - v_5;
    cursor = limit_backward;
    // do, line 194
    int v_6 = cursor;
    // call cleaning, line 194
    r_cleaning();
    cursor = v_6;
    return true;
}

@Override
public boolean equals( Object o ) {
    return o instanceof catalanStemmer;
}

@Override
public int hashCode() {
    return catalanStemmer.class.getName().hashCode();
}



}

