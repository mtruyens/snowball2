// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among2;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class italianStemmer extends org.tartarus.snowball.SnowballStemmer {

    private static final long serialVersionUID = 1L;

private final static Among2 a_0[] = {
    new Among2("", -1, 7),
    new Among2("qu", 0, 6),
    new Among2("\u00E1", 0, 1),
    new Among2("\u00E9", 0, 2),
    new Among2("\u00ED", 0, 3),
    new Among2("\u00F3", 0, 4),
    new Among2("\u00FA", 0, 5)
};

private final static Among2 a_1[] = {
    new Among2("", -1, 3),
    new Among2("I", 0, 1),
    new Among2("U", 0, 2)
};

private final static Among2 a_2[] = {
    new Among2("la", -1, -1),
    new Among2("cela", 0, -1),
    new Among2("gliela", 0, -1),
    new Among2("mela", 0, -1),
    new Among2("tela", 0, -1),
    new Among2("vela", 0, -1),
    new Among2("le", -1, -1),
    new Among2("cele", 6, -1),
    new Among2("gliele", 6, -1),
    new Among2("mele", 6, -1),
    new Among2("tele", 6, -1),
    new Among2("vele", 6, -1),
    new Among2("ne", -1, -1),
    new Among2("cene", 12, -1),
    new Among2("gliene", 12, -1),
    new Among2("mene", 12, -1),
    new Among2("sene", 12, -1),
    new Among2("tene", 12, -1),
    new Among2("vene", 12, -1),
    new Among2("ci", -1, -1),
    new Among2("li", -1, -1),
    new Among2("celi", 20, -1),
    new Among2("glieli", 20, -1),
    new Among2("meli", 20, -1),
    new Among2("teli", 20, -1),
    new Among2("veli", 20, -1),
    new Among2("gli", 20, -1),
    new Among2("mi", -1, -1),
    new Among2("si", -1, -1),
    new Among2("ti", -1, -1),
    new Among2("vi", -1, -1),
    new Among2("lo", -1, -1),
    new Among2("celo", 31, -1),
    new Among2("glielo", 31, -1),
    new Among2("melo", 31, -1),
    new Among2("telo", 31, -1),
    new Among2("velo", 31, -1)
};

private final static Among2 a_3[] = {
    new Among2("ando", -1, 1),
    new Among2("endo", -1, 1),
    new Among2("ar", -1, 2),
    new Among2("er", -1, 2),
    new Among2("ir", -1, 2)
};

private final static Among2 a_4[] = {
    new Among2("ic", -1, -1),
    new Among2("abil", -1, -1),
    new Among2("os", -1, -1),
    new Among2("iv", -1, 1)
};

private final static Among2 a_5[] = {
    new Among2("ic", -1, 1),
    new Among2("abil", -1, 1),
    new Among2("iv", -1, 1)
};

private final static Among2 a_6[] = {
    new Among2("ica", -1, 1),
    new Among2("logia", -1, 3),
    new Among2("osa", -1, 1),
    new Among2("ista", -1, 1),
    new Among2("iva", -1, 9),
    new Among2("anza", -1, 1),
    new Among2("enza", -1, 5),
    new Among2("ice", -1, 1),
    new Among2("atrice", 7, 1),
    new Among2("iche", -1, 1),
    new Among2("logie", -1, 3),
    new Among2("abile", -1, 1),
    new Among2("ibile", -1, 1),
    new Among2("usione", -1, 4),
    new Among2("azione", -1, 2),
    new Among2("uzione", -1, 4),
    new Among2("atore", -1, 2),
    new Among2("ose", -1, 1),
    new Among2("ante", -1, 1),
    new Among2("mente", -1, 1),
    new Among2("amente", 19, 7),
    new Among2("iste", -1, 1),
    new Among2("ive", -1, 9),
    new Among2("anze", -1, 1),
    new Among2("enze", -1, 5),
    new Among2("ici", -1, 1),
    new Among2("atrici", 25, 1),
    new Among2("ichi", -1, 1),
    new Among2("abili", -1, 1),
    new Among2("ibili", -1, 1),
    new Among2("ismi", -1, 1),
    new Among2("usioni", -1, 4),
    new Among2("azioni", -1, 2),
    new Among2("uzioni", -1, 4),
    new Among2("atori", -1, 2),
    new Among2("osi", -1, 1),
    new Among2("anti", -1, 1),
    new Among2("amenti", -1, 6),
    new Among2("imenti", -1, 6),
    new Among2("isti", -1, 1),
    new Among2("ivi", -1, 9),
    new Among2("ico", -1, 1),
    new Among2("ismo", -1, 1),
    new Among2("oso", -1, 1),
    new Among2("amento", -1, 6),
    new Among2("imento", -1, 6),
    new Among2("ivo", -1, 9),
    new Among2("it\u00E0", -1, 8),
    new Among2("ist\u00E0", -1, 1),
    new Among2("ist\u00E8", -1, 1),
    new Among2("ist\u00EC", -1, 1)
};

private final static Among2 a_7[] = {
    new Among2("isca", -1, 1),
    new Among2("enda", -1, 1),
    new Among2("ata", -1, 1),
    new Among2("ita", -1, 1),
    new Among2("uta", -1, 1),
    new Among2("ava", -1, 1),
    new Among2("eva", -1, 1),
    new Among2("iva", -1, 1),
    new Among2("erebbe", -1, 1),
    new Among2("irebbe", -1, 1),
    new Among2("isce", -1, 1),
    new Among2("ende", -1, 1),
    new Among2("are", -1, 1),
    new Among2("ere", -1, 1),
    new Among2("ire", -1, 1),
    new Among2("asse", -1, 1),
    new Among2("ate", -1, 1),
    new Among2("avate", 16, 1),
    new Among2("evate", 16, 1),
    new Among2("ivate", 16, 1),
    new Among2("ete", -1, 1),
    new Among2("erete", 20, 1),
    new Among2("irete", 20, 1),
    new Among2("ite", -1, 1),
    new Among2("ereste", -1, 1),
    new Among2("ireste", -1, 1),
    new Among2("ute", -1, 1),
    new Among2("erai", -1, 1),
    new Among2("irai", -1, 1),
    new Among2("isci", -1, 1),
    new Among2("endi", -1, 1),
    new Among2("erei", -1, 1),
    new Among2("irei", -1, 1),
    new Among2("assi", -1, 1),
    new Among2("ati", -1, 1),
    new Among2("iti", -1, 1),
    new Among2("eresti", -1, 1),
    new Among2("iresti", -1, 1),
    new Among2("uti", -1, 1),
    new Among2("avi", -1, 1),
    new Among2("evi", -1, 1),
    new Among2("ivi", -1, 1),
    new Among2("isco", -1, 1),
    new Among2("ando", -1, 1),
    new Among2("endo", -1, 1),
    new Among2("Yamo", -1, 1),
    new Among2("iamo", -1, 1),
    new Among2("avamo", -1, 1),
    new Among2("evamo", -1, 1),
    new Among2("ivamo", -1, 1),
    new Among2("eremo", -1, 1),
    new Among2("iremo", -1, 1),
    new Among2("assimo", -1, 1),
    new Among2("ammo", -1, 1),
    new Among2("emmo", -1, 1),
    new Among2("eremmo", 54, 1),
    new Among2("iremmo", 54, 1),
    new Among2("immo", -1, 1),
    new Among2("ano", -1, 1),
    new Among2("iscano", 58, 1),
    new Among2("avano", 58, 1),
    new Among2("evano", 58, 1),
    new Among2("ivano", 58, 1),
    new Among2("eranno", -1, 1),
    new Among2("iranno", -1, 1),
    new Among2("ono", -1, 1),
    new Among2("iscono", 65, 1),
    new Among2("arono", 65, 1),
    new Among2("erono", 65, 1),
    new Among2("irono", 65, 1),
    new Among2("erebbero", -1, 1),
    new Among2("irebbero", -1, 1),
    new Among2("assero", -1, 1),
    new Among2("essero", -1, 1),
    new Among2("issero", -1, 1),
    new Among2("ato", -1, 1),
    new Among2("ito", -1, 1),
    new Among2("uto", -1, 1),
    new Among2("avo", -1, 1),
    new Among2("evo", -1, 1),
    new Among2("ivo", -1, 1),
    new Among2("ar", -1, 1),
    new Among2("ir", -1, 1),
    new Among2("er\u00E0", -1, 1),
    new Among2("ir\u00E0", -1, 1),
    new Among2("er\u00F2", -1, 1),
    new Among2("ir\u00F2", -1, 1)
};

private static final char g_v[] = {17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2, 1 };

private static final char g_AEIO[] = {17, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2 };

private static final char g_CG[] = {17 };

private int I_p2;
private int I_p1;
private int I_pV;


private boolean r_prelude() {
    int among_var;
    // (, line 34
    // test, line 35
    int v_1 = cursor;
    // repeat, line 35
    while(true)
    {
        int v_2 = cursor;
        lab0: {
            // (, line 35
            // [, line 36
            bra = cursor;
            // substring, line 36
            among_var = find_among(a_0);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 36
            ket = cursor;
            switch (among_var) {
                case 1:
                    // (, line 37
                    // <-, line 37
                    slice_from("\u00E0");
                    break;
                case 2:
                    // (, line 38
                    // <-, line 38
                    slice_from("\u00E8");
                    break;
                case 3:
                    // (, line 39
                    // <-, line 39
                    slice_from("\u00EC");
                    break;
                case 4:
                    // (, line 40
                    // <-, line 40
                    slice_from("\u00F2");
                    break;
                case 5:
                    // (, line 41
                    // <-, line 41
                    slice_from("\u00F9");
                    break;
                case 6:
                    // (, line 42
                    // <-, line 42
                    slice_from("qU");
                    break;
                case 7:
                    // (, line 43
                    // next, line 43
                    if (cursor >= limit)
                    {
                        break lab0;
                    }
                    cursor++;
                    break;
            }
            continue;
        }
        cursor = v_2;
        break;
    }
    cursor = v_1;
    // repeat, line 46
    while(true)
    {
        int v_3 = cursor;
        lab1: {
            // goto, line 46
            golab2: while(true)
            {
                int v_4 = cursor;
                lab3: {
                    // (, line 46
                    if (!(in_grouping(g_v, 97, 249)))
                    {
                        break lab3;
                    }
                    // [, line 47
                    bra = cursor;
                    // or, line 47
                    lab4: {
                        int v_5 = cursor;
                        lab5: {
                            // (, line 47
                            // literal, line 47
                            if (!(eq_s("u")))
                            {
                                break lab5;
                            }
                            // ], line 47
                            ket = cursor;
                            if (!(in_grouping(g_v, 97, 249)))
                            {
                                break lab5;
                            }
                            // <-, line 47
                            slice_from("U");
                            break lab4;
                        }
                        cursor = v_5;
                        // (, line 48
                        // literal, line 48
                        if (!(eq_s("i")))
                        {
                            break lab3;
                        }
                        // ], line 48
                        ket = cursor;
                        if (!(in_grouping(g_v, 97, 249)))
                        {
                            break lab3;
                        }
                        // <-, line 48
                        slice_from("I");
                    }
                    cursor = v_4;
                    break golab2;
                }
                cursor = v_4;
                if (cursor >= limit)
                {
                    break lab1;
                }
                cursor++;
            }
            continue;
        }
        cursor = v_3;
        break;
    }
    return true;
}

private boolean r_mark_regions() {
    // (, line 52
    I_pV = limit;
    I_p1 = limit;
    I_p2 = limit;
    // do, line 58
    int v_1 = cursor;
    lab0: {
        // (, line 58
        // or, line 60
        lab1: {
            int v_2 = cursor;
            lab2: {
                // (, line 59
                if (!(in_grouping(g_v, 97, 249)))
                {
                    break lab2;
                }
                // or, line 59
                lab3: {
                    int v_3 = cursor;
                    lab4: {
                        // (, line 59
                        if (!(out_grouping(g_v, 97, 249)))
                        {
                            break lab4;
                        }
                        // gopast, line 59
                        golab5: while(true)
                        {
                            lab6: {
                                if (!(in_grouping(g_v, 97, 249)))
                                {
                                    break lab6;
                                }
                                break golab5;
                            }
                            if (cursor >= limit)
                            {
                                break lab4;
                            }
                            cursor++;
                        }
                        break lab3;
                    }
                    cursor = v_3;
                    // (, line 59
                    if (!(in_grouping(g_v, 97, 249)))
                    {
                        break lab2;
                    }
                    // gopast, line 59
                    golab7: while(true)
                    {
                        lab8: {
                            if (!(out_grouping(g_v, 97, 249)))
                            {
                                break lab8;
                            }
                            break golab7;
                        }
                        if (cursor >= limit)
                        {
                            break lab2;
                        }
                        cursor++;
                    }
                }
                break lab1;
            }
            cursor = v_2;
            // (, line 61
            if (!(out_grouping(g_v, 97, 249)))
            {
                break lab0;
            }
            // or, line 61
            lab9: {
                int v_6 = cursor;
                lab10: {
                    // (, line 61
                    if (!(out_grouping(g_v, 97, 249)))
                    {
                        break lab10;
                    }
                    // gopast, line 61
                    golab11: while(true)
                    {
                        lab12: {
                            if (!(in_grouping(g_v, 97, 249)))
                            {
                                break lab12;
                            }
                            break golab11;
                        }
                        if (cursor >= limit)
                        {
                            break lab10;
                        }
                        cursor++;
                    }
                    break lab9;
                }
                cursor = v_6;
                // (, line 61
                if (!(in_grouping(g_v, 97, 249)))
                {
                    break lab0;
                }
                // next, line 61
                if (cursor >= limit)
                {
                    break lab0;
                }
                cursor++;
            }
        }
        // setmark pV, line 62
        I_pV = cursor;
    }
    cursor = v_1;
    // do, line 64
    int v_8 = cursor;
    lab13: {
        // (, line 64
        // gopast, line 65
        golab14: while(true)
        {
            lab15: {
                if (!(in_grouping(g_v, 97, 249)))
                {
                    break lab15;
                }
                break golab14;
            }
            if (cursor >= limit)
            {
                break lab13;
            }
            cursor++;
        }
        // gopast, line 65
        golab16: while(true)
        {
            lab17: {
                if (!(out_grouping(g_v, 97, 249)))
                {
                    break lab17;
                }
                break golab16;
            }
            if (cursor >= limit)
            {
                break lab13;
            }
            cursor++;
        }
        // setmark p1, line 65
        I_p1 = cursor;
        // gopast, line 66
        golab18: while(true)
        {
            lab19: {
                if (!(in_grouping(g_v, 97, 249)))
                {
                    break lab19;
                }
                break golab18;
            }
            if (cursor >= limit)
            {
                break lab13;
            }
            cursor++;
        }
        // gopast, line 66
        golab20: while(true)
        {
            lab21: {
                if (!(out_grouping(g_v, 97, 249)))
                {
                    break lab21;
                }
                break golab20;
            }
            if (cursor >= limit)
            {
                break lab13;
            }
            cursor++;
        }
        // setmark p2, line 66
        I_p2 = cursor;
    }
    cursor = v_8;
    return true;
}

private boolean r_postlude() {
    int among_var;
    // repeat, line 70
    while(true)
    {
        int v_1 = cursor;
        lab0: {
            // (, line 70
            // [, line 72
            bra = cursor;
            // substring, line 72
            among_var = find_among(a_1);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 72
            ket = cursor;
            switch (among_var) {
                case 1:
                    // (, line 73
                    // <-, line 73
                    slice_from("i");
                    break;
                case 2:
                    // (, line 74
                    // <-, line 74
                    slice_from("u");
                    break;
                case 3:
                    // (, line 75
                    // next, line 75
                    if (cursor >= limit)
                    {
                        break lab0;
                    }
                    cursor++;
                    break;
            }
            continue;
        }
        cursor = v_1;
        break;
    }
    return true;
}

private boolean r_RV() {
    if (!(I_pV <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_R1() {
    if (!(I_p1 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_R2() {
    if (!(I_p2 <= cursor))
    {
        return false;
    }
    return true;
}

private boolean r_attached_pronoun() {
    int among_var;
    // (, line 86
    // [, line 87
    ket = cursor;
    // substring, line 87
    if (find_among_b(a_2) == 0)
    {
        return false;
    }
    // ], line 87
    bra = cursor;
    // Among2, line 97
    among_var = find_among_b(a_3);
    if (among_var == 0)
    {
        return false;
    }
    // (, line 97
    // call RV, line 97
    if (!r_RV())
    {
        return false;
    }
    switch (among_var) {
        case 1:
            // (, line 98
            // delete, line 98
            slice_del();
            break;
        case 2:
            // (, line 99
            // <-, line 99
            slice_from("e");
            break;
    }
    return true;
}

private boolean r_standard_suffix() {
    int among_var;
    // (, line 103
    // [, line 104
    ket = cursor;
    // substring, line 104
    among_var = find_among_b(a_6);
    if (among_var == 0)
    {
        return false;
    }
    // ], line 104
    bra = cursor;
    switch (among_var) {
        case 1:
            // (, line 111
            // call R2, line 111
            if (!r_R2())
            {
                return false;
            }
            // delete, line 111
            slice_del();
            break;
        case 2:
            // (, line 113
            // call R2, line 113
            if (!r_R2())
            {
                return false;
            }
            // delete, line 113
            slice_del();
            // try, line 114
            int v_1 = limit - cursor;
            lab0: {
                // (, line 114
                // [, line 114
                ket = cursor;
                // literal, line 114
                if (!(eq_s_b("ic")))
                {
                    cursor = limit - v_1;
                    break lab0;
                }
                // ], line 114
                bra = cursor;
                // call R2, line 114
                if (!r_R2())
                {
                    cursor = limit - v_1;
                    break lab0;
                }
                // delete, line 114
                slice_del();
            }
            break;
        case 3:
            // (, line 117
            // call R2, line 117
            if (!r_R2())
            {
                return false;
            }
            // <-, line 117
            slice_from("log");
            break;
        case 4:
            // (, line 119
            // call R2, line 119
            if (!r_R2())
            {
                return false;
            }
            // <-, line 119
            slice_from("u");
            break;
        case 5:
            // (, line 121
            // call R2, line 121
            if (!r_R2())
            {
                return false;
            }
            // <-, line 121
            slice_from("ente");
            break;
        case 6:
            // (, line 123
            // call RV, line 123
            if (!r_RV())
            {
                return false;
            }
            // delete, line 123
            slice_del();
            break;
        case 7:
            // (, line 124
            // call R1, line 125
            if (!r_R1())
            {
                return false;
            }
            // delete, line 125
            slice_del();
            // try, line 126
            int v_2 = limit - cursor;
            lab1: {
                // (, line 126
                // [, line 127
                ket = cursor;
                // substring, line 127
                among_var = find_among_b(a_4);
                if (among_var == 0)
                {
                    cursor = limit - v_2;
                    break lab1;
                }
                // ], line 127
                bra = cursor;
                // call R2, line 127
                if (!r_R2())
                {
                    cursor = limit - v_2;
                    break lab1;
                }
                // delete, line 127
                slice_del();
                switch (among_var) {
                    case 1:
                        // (, line 128
                        // [, line 128
                        ket = cursor;
                        // literal, line 128
                        if (!(eq_s_b("at")))
                        {
                            cursor = limit - v_2;
                            break lab1;
                        }
                        // ], line 128
                        bra = cursor;
                        // call R2, line 128
                        if (!r_R2())
                        {
                            cursor = limit - v_2;
                            break lab1;
                        }
                        // delete, line 128
                        slice_del();
                        break;
                }
            }
            break;
        case 8:
            // (, line 133
            // call R2, line 134
            if (!r_R2())
            {
                return false;
            }
            // delete, line 134
            slice_del();
            // try, line 135
            int v_3 = limit - cursor;
            lab2: {
                // (, line 135
                // [, line 136
                ket = cursor;
                // substring, line 136
                if (find_among_b(a_5) == 0)
                {
                    cursor = limit - v_3;
                    break lab2;
                }
                // ], line 136
                bra = cursor;
                // (, line 137
                // call R2, line 137
                if (!r_R2())
                {
                    cursor = limit - v_3;
                    break lab2;
                }
                // delete, line 137
                slice_del();
            }
            break;
        case 9:
            // (, line 141
            // call R2, line 142
            if (!r_R2())
            {
                return false;
            }
            // delete, line 142
            slice_del();
            // try, line 143
            int v_4 = limit - cursor;
            lab3: {
                // (, line 143
                // [, line 143
                ket = cursor;
                // literal, line 143
                if (!(eq_s_b("at")))
                {
                    cursor = limit - v_4;
                    break lab3;
                }
                // ], line 143
                bra = cursor;
                // call R2, line 143
                if (!r_R2())
                {
                    cursor = limit - v_4;
                    break lab3;
                }
                // delete, line 143
                slice_del();
                // [, line 143
                ket = cursor;
                // literal, line 143
                if (!(eq_s_b("ic")))
                {
                    cursor = limit - v_4;
                    break lab3;
                }
                // ], line 143
                bra = cursor;
                // call R2, line 143
                if (!r_R2())
                {
                    cursor = limit - v_4;
                    break lab3;
                }
                // delete, line 143
                slice_del();
            }
            break;
    }
    return true;
}

private boolean r_verb_suffix() {
    // setlimit, line 148
    if (cursor < I_pV)
    {
        return false;
    }
    int v_2 = limit_backward;
    limit_backward = I_pV;
    // (, line 148
    // [, line 149
    ket = cursor;
    // substring, line 149
    if (find_among_b(a_7) == 0)
    {
        limit_backward = v_2;
        return false;
    }
    // ], line 149
    bra = cursor;
    // (, line 163
    // delete, line 163
    slice_del();
    limit_backward = v_2;
    return true;
}

private boolean r_vowel_suffix() {
    // (, line 170
    // try, line 171
    int v_1 = limit - cursor;
    lab0: {
        // (, line 171
        // [, line 172
        ket = cursor;
        if (!(in_grouping_b(g_AEIO, 97, 242)))
        {
            cursor = limit - v_1;
            break lab0;
        }
        // ], line 172
        bra = cursor;
        // call RV, line 172
        if (!r_RV())
        {
            cursor = limit - v_1;
            break lab0;
        }
        // delete, line 172
        slice_del();
        // [, line 173
        ket = cursor;
        // literal, line 173
        if (!(eq_s_b("i")))
        {
            cursor = limit - v_1;
            break lab0;
        }
        // ], line 173
        bra = cursor;
        // call RV, line 173
        if (!r_RV())
        {
            cursor = limit - v_1;
            break lab0;
        }
        // delete, line 173
        slice_del();
    }
    // try, line 175
    int v_2 = limit - cursor;
    lab1: {
        // (, line 175
        // [, line 176
        ket = cursor;
        // literal, line 176
        if (!(eq_s_b("h")))
        {
            cursor = limit - v_2;
            break lab1;
        }
        // ], line 176
        bra = cursor;
        if (!(in_grouping_b(g_CG, 99, 103)))
        {
            cursor = limit - v_2;
            break lab1;
        }
        // call RV, line 176
        if (!r_RV())
        {
            cursor = limit - v_2;
            break lab1;
        }
        // delete, line 176
        slice_del();
    }
    return true;
}

public boolean stem() {
    // (, line 181
    // do, line 182
    int v_1 = cursor;
    // call prelude, line 182
    r_prelude();
    cursor = v_1;
    // do, line 183
    // call mark_regions, line 183
    r_mark_regions();
    // backwards, line 184
    limit_backward = cursor;
    cursor = limit;
    // (, line 184
    // do, line 185
    int v_3 = limit - cursor;
    // call attached_pronoun, line 185
    r_attached_pronoun();
    cursor = limit - v_3;
    // do, line 186
    int v_4 = limit - cursor;
    lab0: {
        // (, line 186
        // or, line 186
        lab1: {
            int v_5 = limit - cursor;
            lab2: {
                // call standard_suffix, line 186
                if (!r_standard_suffix())
                {
                    break lab2;
                }
                break lab1;
            }
            cursor = limit - v_5;
            // call verb_suffix, line 186
            if (!r_verb_suffix())
            {
                break lab0;
            }
        }
    }
    cursor = limit - v_4;
    // do, line 187
    int v_6 = limit - cursor;
    // call vowel_suffix, line 187
    r_vowel_suffix();
    cursor = limit - v_6;
    cursor = limit_backward;
    // do, line 189
    int v_7 = cursor;
    // call postlude, line 189
    r_postlude();
    cursor = v_7;
    return true;
}

@Override
public boolean equals( Object o ) {
    return o instanceof italianStemmer;
}

@Override
public int hashCode() {
    return italianStemmer.class.getName().hashCode();
}



}

